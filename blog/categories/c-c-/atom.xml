<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C/C++ | Simple Coding, Better Life]]></title>
  <link href="http://jackyche.github.com/blog/categories/c-c-/atom.xml" rel="self"/>
  <link href="http://jackyche.github.com/"/>
  <updated>2012-07-08T13:35:48+08:00</updated>
  <id>http://jackyche.github.com/</id>
  <author>
    <name><![CDATA[Jackyche]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[std::tr1::shared_ptr学习笔记]]></title>
    <link href="http://jackyche.github.com/blog/2012/07/08/smart-pointer-study-notes/"/>
    <updated>2012-07-08T11:27:00+08:00</updated>
    <id>http://jackyche.github.com/blog/2012/07/08/smart-pointer-study-notes</id>
    <content type="html"><![CDATA[<p>C++有一个很头疼的事情，当程序比较复杂的时候，管理指针对象的生命周期，对程序员来说相当麻烦。《小小帝国》上一个版本的开发期间，经常出现由于对象没有被析构而产生的内存泄露，或者由于某个地方错误释放对象而导致的非法内存访问。考虑到以后不能一直这样耗功夫去关注这方面的事情，这个版本的《小小帝国》引入了智能指针。</p>

<p>C++98里面只有一种智能指针，就是<code>std::auto_ptr</code>，但是它具有唯一所有权的特征，其实不好用(比如说你没有办法在容器中使用它)。《effective c++》作者推荐用的<code>std::tr1::shard_ptr</code>就好用很多，它采用RAII技术，通过引用计数的方式来自动管理对象的生存周期，基本上就符合我们的需求了。</p>

<p>而且<code>std::tr1::shared_ptr</code>在最新的c++11中，已经被列入标准指针了，而c++98中的<code>std::auto_ptr</code>已经出局。</p>

<p>下面是使用<code>std::tr1::shared_ptr</code>过程中的一些学习笔记。</p>

<h2>需要引入的头文件</h2>

<pre><code>#include&lt;tr1/memory&gt;
</code></pre>

<h2>声明并初始化一个std::tr1::shared_ptr</h2>

<pre><code>std::tr1::shared_ptr&lt;T&gt; ptr(new T());  
</code></pre>

<h2>返回实际的对象指针</h2>

<pre><code>std::tr1::shared_ptr&lt;T&gt; ptr(new T());
T* = ptr.get();
</code></pre>

<h2>清空当前shared_ptr</h2>

<pre><code>std::tr1::shared_ptr&lt;T&gt; ptr(new T());
ptr.reset();
</code></pre>

<p>这里所做的事情是：清空当前的<code>shared_ptr</code>，并且基于该指针所创建的其它<code>shared_ptr</code>指针的引用计数减一。</p>

<h2>基类向下转型为子类</h2>

<pre><code>std::tr1::shared_ptr&lt;A&gt; ptr_a(new A());
std::tr1::shared_ptr&lt;B&gt; ptr_b = std::tr1::dynamic_pointer_cast&lt;B&gt;(ptr_a);
</code></pre>

<h2>如何打破循环引用</h2>

<p>引用计数有个麻烦，它无法解决所谓循环引用的问题。比如有对象A和B，他们各自有一个智能指针指向对方，这种情况下对象是没有办法被释放的。</p>

<p>这种情况下，我们需要在打破循环的地方使用<code>std::tr1::weak_ptr</code>。<code>weak_ptr</code>是稍微“弱”一点的智能指针，它不会增加引用计数，但是在指针生命结束以后，又会把引用计数减一，从而可以打破循环引用的死锁情况。</p>

<p>所以在使用<code>shared_ptr</code>的时候，如果有引起循环引用的情况，需要在程序的某处使用<code>weak_ptr</code>，打破死锁情况，使得对象能够被正常释放。</p>

<h2>如果我们手头上只有对象的原始指针，那怎么办？</h2>

<p>当我们手头上只有对象的原始指针，我们如何生成需要的<code>shared_ptr</code>。比如在对象的函数内部，我们只有<code>this</code>指针，从裸指针中我们怎么获取<code>shared_ptr</code>？</p>

<p>下面的方式是不对的。</p>

<pre><code>std::tr1::shared_ptr&lt;T&gt; ptr_a(this);
</code></pre>

<p>这种情况下，ptr_a对this的引用计数只有1，它没有办法知道其它智能指针对this指针的引用情况，所以当ptr_a的生命周期结束之后，它的引用计数变成0， 会把对象释放掉。这就导致其它智能指针的非法内存访问。</p>

<p>tr1提供了<code>std::tr1::enable_shared_from_this</code>来解决这个问题，你可以使用它来作为对象的基类，然后就可以从this指针中引出具有统一引用计数的shared_ptr了。</p>

<pre><code>class T : public std::tr1::enable_shared_from_this&lt;T&gt; 
{ 
public: 
    std::tr1::shared_ptr&lt;T&gt; function() { 
        return shared_from_this(); 
    } 
}; 
</code></pre>

<p>这里需要注意的一个问题是：<code>shared_from_this()</code>是通过一个对自己的 <code>weak_ptr</code>的引用来返回this的<code>shared_ptr</code>的，所以在返回智能指针的时候，你要确保对象已经构造完成。所以你不能在对象的构造函数里面调用<code>shared_from_this()</code>。</p>

<h2>智能指针的比较</h2>

<p>可以拿两个智能指针来做比较，从源码上来看，本质上它是直接拿原始指针来做比较的。</p>

<p>如果我们有两个智能指针ptr_a和ptr_b:</p>

<pre><code>std::tr1::shared_ptr&lt;T&gt; ptr_a(new T());
std::tr1::shared_ptr&lt;T&gt; ptr_b(new T());
</code></pre>

<p>那么下面的指针比较</p>

<pre><code>ptr_a == ptr_b
</code></pre>

<p>本质上其实是</p>

<pre><code>ptr_a.get() == ptr_b.get()
</code></pre>

<h2>std::tr1::shared_ptr到底是什么？</h2>

<p><code>shared_ptr</code>本质上持有两个东西：一个是对象的原始指针<code>T*</code>，所以你可以通过<code>get()</code>函数获取到。另外它还持有一个全局的计数器<code>aux*</code>，它通过对象的拷贝构造函数、析构函数来对引用计数进行加减。</p>

<p>下面是一个不完全的类定义，帮助理解</p>

<pre><code>template&lt;class T&gt;
class shared_ptr
{
    struct aux
    {
        unsigned count;

        aux() :count(1) {}
        virtual void destroy()=0;
        virtual ~aux() {} //must be polymorphic
    };

    template&lt;class U, class Deleter&gt;
    struct auximpl: public aux
    {
        U* p;
        Deleter d;

        anximpl(U* pu, Deleter x) :p(pu), d(x) {}
        virtual void destroy() { d(p); } 
    };

    template&lt;class U&gt;
    struct default_deleter
    {
        void operator()(U* p) const { delete p; }
    };

    aux* pa;
    T* pt;

    void inc() { if(pa) interloked_inc(pa-&gt;count); }

    void dec() 
    { 
        if(pa &amp;&amp; !interlocked_dec(pa-&gt;count)) 
        {  pa-&gt;destroy(); delete pa; }
    }
public:

    shared_ptr() :pa(), pt() {}

    template&lt;class U, class Deleter&gt;
    shared_ptr(U* pu, Deleter d) :pa(new auximpl&lt;U,Deleter&gt;(pu,d)) {}

    template&lt;class U&gt;
    explicit shared_ptr(U* pu) :pa(new auximpl&lt;U,default_deleter&lt;U&gt; &gt;(pu,default_deleter&lt;U&gt;())) {}

    shared_ptr(const shared_ptr&amp; s) :pa(s.pa), pt(s.pt) { inc(); }

    template&lt;class U&gt;
    shared_ptr(const shared_ptr&lt;U&gt;&amp; s) :pa(s.pa), pt(s.pt) { inc(); }

    ~shared_ptr() { dec(); }
    shared_ptr&amp; operator=(const shared_ptr&amp; s)
    {
        if(thsi!=&amp;s)
        {
            dec();
            pa = s.pa; pt=s.pt;
            inc();
        }        
        return *this;
    }

    T* operator-&gt;() const { return p; }
    T&amp; operator*() const { return *p; }
};
</code></pre>

<hr />

<p>基本上这次引入智能指针所用到的知识点就是以上了，如有纰漏，敬请指正。</p>
]]></content>
  </entry>
  
</feed>
